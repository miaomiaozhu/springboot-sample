<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.sample.user.mapper.UserMapper">
    
    <resultMap type="com.example.sample.user.domain.User" id="UserResult">
        <result property="userId"    column="user_id"   jdbcType="VARCHAR" />
        <result property="userName"    column="user_name"   jdbcType="VARCHAR" />
        <result property="age"    column="age"   jdbcType="NUMERIC" />
        <result property="birthDate"    column="birth_date"   jdbcType="VARCHAR" />
        <result property="nativePlace"    column="native_place"   jdbcType="VARCHAR" />
        <result property="remark"    column="remark"   jdbcType="VARCHAR" />
        <result property="createBy"    column="create_by"   jdbcType="VARCHAR" />
        <result property="createTime"    column="create_time"   jdbcType="DATE" />
        <result property="updateBy"    column="update_by"   jdbcType="VARCHAR" />
        <result property="updateTime"    column="update_time"   jdbcType="DATE" />
        <result property="idNumber"    column="id_number"  jdbcType="VARCHAR"  />
    </resultMap>

    <sql id="selectUserVo">
        select user_id, user_name, age, birth_date, native_place, remark, create_by, create_time, update_by, update_time, id_number from test_user
    </sql>

    <select id="selectUserList" parameterType="com.example.sample.user.domain.User" resultMap="UserResult">
        <include refid="selectUserVo"/>
        <where>  
            <if test="userName != null  and userName != ''"> and userName like concat(concat('%', #{userName}), '%')</if>
            <if test="age != null "> and age = #{age}</if>
            <if test="birthDate != null  and birthDate != ''"> and birth_date = #{birthDate}</if>
            <if test="nativePlace != null  and nativePlace != ''"> and native_place = #{nativePlace}</if>
            <if test="remark != null "> and remark = #{remark}</if>
            <if test="idNumber != null  and idNumber != ''"> and id_number = #{idNumber}</if>
        </where>
    </select>
    
    <select id="selectUserById" parameterType="String" resultMap="UserResult">
        <include refid="selectUserVo"/>
        where user_id = #{userId}
    </select>
        
    <insert id="insertUser" parameterType="com.example.sample.user.domain.User">
        <selectKey keyProperty="userId" resultType="String" order="BEFORE">
            SELECT seq_user.NEXTVAL as userId FROM DUAL
        </selectKey>
        insert into test_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="userName != null">user_name,</if>
            <if test="age != null">age,</if>
            <if test="birthDate != null">birth_date,</if>
            <if test="nativePlace != null">native_place,</if>
            <if test="remark != null">remark,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="idNumber != null">id_number,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="userName != null">#{user_name},</if>
            <if test="age != null">#{age},</if>
            <if test="birthDate != null">#{birthDate},</if>
            <if test="nativePlace != null">#{nativePlace},</if>
            <if test="remark != null">#{remark},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="idNumber != null">#{idNumber},</if>
         </trim>
    </insert>
   <insert id="batchInsertUser" useGeneratedKeys="false">
        INSERT INTO test_user (
        user_id,
        user_name,
        age,
        birth_date,
        native_place,
        create_by,
        create_time,
        update_by,
        update_time,
        id_number,
        remark
        )
         select  seq_user.NEXTVAL,cd.* from(
        <foreach collection="list" item="item" index="index" separator="union all">
            SELECT
            #{item.userName ,jdbcType=VARCHAR},
            #{item.age ,jdbcType=NUMERIC},
            #{item.birthDate ,jdbcType=VARCHAR},
            #{item.nativePlace ,jdbcType=VARCHAR},
            #{item.createBy ,jdbcType=VARCHAR},
            #{item.createTime ,jdbcType=DATE},
            #{item.updateBy ,jdbcType=VARCHAR},
            #{item.updateTime ,jdbcType=DATE},
            #{item.idNumber ,jdbcType=VARCHAR},
            #{item.remark ,jdbcType=VARCHAR}
            FROM DUAL
        </foreach>
       )cd
    </insert>


    <update id="updateUser" parameterType="com.example.sample.user.domain.User">
        update test_user
        <trim prefix="SET" suffixOverrides=",">
            <if test="userName != null">user_name = #{name},</if>
            <if test="age != null">age = #{age},</if>
            <if test="birthDate != null">birth_date = #{birthDate},</if>
            <if test="nativePlace != null">native_place = #{nativePlace},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="idNumber != null">id_number = #{idNumber},</if>
        </trim>
        where user_id = #{userId}
    </update>

    <delete id="deleteUserById" parameterType="String">
        delete from test_user where user_id = #{userId}
    </delete>

    <delete id="deleteUserByIds" parameterType="String">
        delete from test_user where user_id in 
        <foreach item="userId" collection="array" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>
</mapper>